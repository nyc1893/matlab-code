%% Shuo Zhou, Xuan Vinh Nguyen, James Bailey, Yunzhe Jia, Ian Davidson,
% "Accelerating Online CP Decompositions for Higher Order Tensors",
% (C) 2016 Shuo Zhou   
% Email: zhous@student.unimelb.edu.au

% To run the code, Tensor Toolbox is required.
% Brett W. Bader, Tamara G. Kolda and others. MATLAB Tensor Toolbox 
% Version 2.6, Available online, February 2015. 
% URL: http://www.sandia.gov/~tgkolda/TensorToolbox/

%% This is a demo to compare OnlineCP with classic ALS algorithms
% Batch Cold is typical ALS implemented in Tensor Toolbox
% Batch Hot uses the previous result as the initialization to ALS

clc;clear;close all;
addpath(genpath('.'));



%% generate data
N2=100;
dims = [53, 3, N2];
N = length(dims);
tao = round(0.2*dims(end));
TT = dims(end)-tao;
R = 30;




N1 = 365*24*6

WS_MIN = 1e-3;
MET_2009='C:\Users\yunchuanl\Downloads\WinPython\notebooks\MET_2009.csv';
MET_2010='C:\Users\yunchuanl\Downloads\WinPython\notebooks\MET_2010.csv';

GE_2009='C:\Users\yunchuanl\Downloads\WinPython\notebooks\GE_kW_2009.csv';
GE_2010='C:\Users\yunchuanl\Downloads\WinPython\notebooks\GE_kW_2010.csv';

WS1_2010 = csvread(MET_2010, 1,5, [1,5,N1,5]);
ind = find(~isnan(WS1_2010));
WS1_2010_preprocessed = interp1(ind, WS1_2010(ind), (1:N1)', 'linear', 'extrap');
for i=1:N1
    WS1_2010_preprocessed(i) = max(WS1_2010_preprocessed(i), WS_MIN);
end
clear WS1_2010;


WS2_2010 = csvread(MET_2010, 1,7, [1,7,N1,7]);
ind = find(~isnan(WS2_2010));
WS2_2010_preprocessed = interp1(ind, WS2_2010(ind), (1:N1)', 'linear', 'extrap');
for i=1:N1
    WS2_2010_preprocessed(i) = max(WS2_2010_preprocessed(i), WS_MIN);
end
clear WS2_2010;

for i=1:N1
	WS_2010(i)=(WS1_2010_preprocessed(i)+WS2_2010_preprocessed(i))/2;
end
clear WS1_2010_preprocessed;
clear WS2_2010_preprocessed;

METDIR_A_2010 = csvread(MET_2010, 1,6, [1,6,N1,6]);
ind = find(~isnan(METDIR_A_2010));
METDIR_A_2010_preprocessed = interp1(ind, METDIR_A_2010(ind), (1:N1)', 'linear', 'extrap');
for i=1:N1
    METDIR_A_2010_preprocessed(i) = max(METDIR_A_2010_preprocessed(i), WS_MIN);
end

clear ind METDIR_A_2010;

METDIR_H_2010 = csvread(MET_2010, 1,12, [1,12,N1,12]);
ind = find(~isnan(METDIR_H_2010));
METDIR_H_2010_preprocessed = interp1(ind, METDIR_H_2010(ind), (1:N1)', 'linear', 'extrap');
for i=1:N1
    METDIR_H_2010_preprocessed(i) = max(METDIR_H_2010_preprocessed(i), WS_MIN);
end
clear ind METDIR_H_2010 ;

for i=1:N1
	METDIR_2010(i)=(METDIR_A_2010_preprocessed(i)+METDIR_H_2010_preprocessed(i))/2;
end
clear ind METDIR_A_2010_preprocessed
clear ind METDIR_H_2010_preprocessed


%data packaging
N3=1200;

sum_power=0;
sum_ws=0;
sum_dir=0;
S1=0;S2=0;S3=0;
for i=(N3+1):(N3+N2)
	GE_PW=csvread(GE_2010, i,5, [i,5,i,57]);   %get ith line 
	A=GE_PW;
	A(A<0)=0;

    B=METDIR_2010(i)*ones(1,length(A));
    D=WS_2010(i)*ones(1,length(A));
    C(:,:,(i-N3))=[A',B',D'];
end

for i=(N3+1):(N3+N2)
	GE_PW=csvread(GE_2010, i,5, [i,5,i,57]);   %get ith line 
	A=GE_PW;
	A(A<0)=0;
    %{
    B=METDIR_2010(i)*ones(1,length(A));
    D=WS_2010(i)*ones(1,length(A));
    C(:,:,(i-N3))=[A',B',D'];
	  %} 
    S1=0;S2=0;S3=0;
	for j=1:size(A,2)
		S1=A(j)+S1;
	end
	sum_power(i-N3)=S1;

	B=METDIR_2010(i)*ones(1,length(A));
	for j=1:size(B,2)
		S2=B(j)+S2;
	end
	sum_dir(i-N3)=S2;%}
                    
	D=WS_2010(i)*ones(1,length(A));
	for j=1:size(D,2)
		S3=D(j)+S3;
	end	
	sum_ws(i-N3)=S3;
	
	AA=bsxfun(@rdivide,A',sum_power(i-N3));
	BB=bsxfun(@rdivide,B',sum_dir(i-N3));
	DD=bsxfun(@rdivide,D',sum_ws(i-N3));
	
	M(:,:,(i-N3))=[AA,BB,DD];
    

end



% X=tensor(M);
%% Normalizing data
%X=bsxfun(@rdivide,M,sum(M));
X=M;
%% initialization
% get initX
idx = repmat({':'}, 1, length(dims));
idx(end) = {1:tao};
initX = X(idx{:});

% factorize initX 
initOpt.printitn = 1;
initOpt.maxiters = 100;
initOpt.tol = 1e-8;
estInitX = cp_als(tensor(initX), R, initOpt);
initAs = estInitX.U;
% absorb lambda into the last dimension
initAs{end} = initAs{end}*diag(estInitX.lambda);

% initilize each algorithm
% batch 
batchHotAs = initAs;
T=outer_product(initAs);
% initialize onlineCP method
[onlinePs, onlineQs] = onlineCP_initial(initX, initAs, R);
onlineAs = initAs(1:end-1);
onlineAs_N = initAs{end};


%% adding new data
minibatchSize = 1;
k = 1;
miss_prob=0.8;


for t=1:minibatchSize:TT
   % clc;
    fprintf('the %dth steps\n', k);
    % get the incoming slice
    endTime = min(tao+t+minibatchSize-1, dims(end));
    idx(end) = {tao+t:endTime};
    rnd=rand;
    if rnd<=(miss_prob) || t==1
    x = squeeze(X(idx{:}));
    else
%         x=zeros(dims(1),dims(2));
 
    x = squeeze(X(idx{:}));
    for sl=1:minibatchSize
x(1,:,sl)=zeros(1,3).*x(1,:,sl);
% x(2,:,sl)=zeros(1,4).*x(2,:,sl);
% x(3,:,sl)=zeros(1,4).*x(3,:,sl);
% x(4,:,sl)=zeros(1,4).*x(4,:,sl);
    end
    end
    
    numOfSlice = endTime-tao-t+1;
    % get tensor X of time current time
    idx(end) = {1:endTime};
    Xt = X(idx{:});

    % cold batch
    batchColdOpt.printitn = 0;
    tic;
    batchColdXt = cp_als(tensor(Xt), R, batchColdOpt);
    runtime = toc;
    time(1, k) = runtime;
    fitness(1, k) = 1-(norm(tensor(Xt)-full(batchColdXt))/norm(tensor(Xt)));

    % hot batch
    tic;
    % estimate the projection of new data on the time mode
    batchHotAlpha = reshape(permute(x, [N, 1:N-1]), numOfSlice, [])...
        *khatrirao(batchHotAs(1:end-1), 'r')/getHadamard(batchHotAs(1:end-1));
    batchHotAs{end} = [batchHotAs{end}; batchHotAlpha];
    batchHotOpt.printitn = 0;
    batchHotOpt.init = batchHotAs;
    batchHotXt = cp_als(tensor(Xt), R, batchHotOpt);
    batchHotAs = batchHotXt.U;
    batchHotAs{end} = batchHotAs{end}*diag(batchHotXt.lambda);
    runtime = toc;
    time(2, k) = runtime;
    fitness(2, k) = 1-(norm(tensor(Xt)-full(batchHotXt))/norm(tensor(Xt)));

    % online CP
%     if rnd<=(miss_prob)
    tic;
    [onlineAs, onlinePs, onlineQs, onlineAlpha] = onlineCP_update(x, onlineAs, onlinePs, onlineQs);
%     end

    runtime = toc;
%     tmp = [onlineAs; {onlineAs_N}];
    time(3, k) = runtime;
%     fitness(3, k) = 1-(norm(tensor(Xt)-full(ktensor(tmp)))/norm(tensor(Xt)));
    %%
	ck=onlineAs_N((end-tao+1):end,:);
	gama(size(ck,2))=0;
    S=0;
	for j=1:size(ck,2)
		for i=1:size(ck,1) %  zhiqian =30
			S = S+ ck(i,j);
        end
         gama(j)=S/size(ck,1);
	end
	
	% 1 step predict
	a=onlineAs{1};
	b=onlineAs{2};
	
	
	

	
	for k=1:size(a,1)
    for j=1:size(b,1)

            SS=0;
            S=0;
            for r=1:size(b,2)
                SS=estInitX.lambda(r)*gama(r)*a(k,r)*b(j,r);
                S=SS+S;
            end
            Ten(k,j,t)=S;

		end
	end
	
  %  V_PMU1(t:t+minibatchSize-1,1)=);
  %  V_PMU1(t:t+minibatchSize-1,2)=X(1,1,(tao+t:tao+t+minibatchSize-1));
 %   Phi_PMU1(t:t+minibatchSize-1,1)Ten(1,2,t);=
  %  Phi_PMU1(t:t+minibatchSize-1,2)=X(1,2,(tao+t:tao+t+minibatchSize-1));
%    I_PMU1(t:t+minibatchSize-1,1)=Ten(1,3,t);
 %   I_PMU1(t:t+minibatchSize-1,2)=X(1,3,(tao+t:tao+t+minibatchSize-1));
	

    k = k+1;
    if rnd<=(miss_prob)
    onlineAs_N(end+1:end+minibatchSize,:) = onlineAlpha;
end
end





%%
for i=1:TT
    S=0;
    for j=1:size(Ten,1)
     S=bsxfun(@times,Ten(j,1,i),sum(sum_power(21:100)))+S;
    end
    pred(i)=S;
end

for i=1:TT
    S=0;
    for j=1:size(Ten,1)
     S=Ten(j,1,i)+S;
    end
    pred3(i)=S;
end


for i=tao+1:tao+TT
    S=0;
    for j=1:size(Ten,1)
     S=C(j,1,i)+S;
    end
    real(i-tao)=S;
end

pred2=pred/(sum(pred)/sum(real));
pred4=pred3/(sum(pred3)/sum(real));

figure

plot(pred4,'g--')
hold on
plot(real,'b:','LineWidth',2)
legend('Estimated1','Estimated2','Real');




%{
figure
plot(I_PMU1(:,1),'r--')
hold on
plot(I_PMU1(:,2),'b:','LineWidth',2)
title(['Wind Speed estimation for Rank= ',num2str(R)]);
legend('Estimated','Real');
xlabel('Step','FontSize',10,'FontWeight','bold');
ylabel('WS (m/s)','FontSize',10,'FontWeight','bold');


figure
plot(V_PMU1(:,1),'r--')
hold on
plot(V_PMU1(:,2),'b:','LineWidth',2)
title(['Wind power estimation for Rank= ',num2str(R)]);
legend('Estimated','Real');
xlabel('Step','FontSize',10,'FontWeight','bold');
ylabel('Power (kw)','FontSize',10,'FontWeight','bold');

figure
plot(Phi_PMU1(:,1),'r--')
hold on
plot(Phi_PMU1(:,2),'b:','LineWidth',2)
title(['wind direction estimation for Rank= ',num2str(R)]);
legend('Estimated','Real');
xlabel('Step','FontSize',10,'FontWeight','bold');
ylabel('wind direction(Degree)','FontSize',10,'FontWeight','bold');
%}

%{
for kk=10881:10980
    for j=1:4
        for i=1:4
            if i==1
                M(i,j,k)=M2(j,kk);
            elseif i==2
                M(i,j,k)=M3(j,kk);
            elseif i==3
                M(i,j,k)=M4(j,kk);
            elseif i==4
                M(i,j,k)=M5(j,kk);
            end
        end
    end
                k=k+1;
end

   test = [1 2 10; 3 4 20; 9 6 15];
   test2=bsxfun(@rdivide,test,sum(test)) ;
   test3=bsxfun(@times,test2,sum(test));



%}
